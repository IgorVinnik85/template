{"version":3,"file":"static/js/451.87cd55ec.chunk.js","mappings":"oPA8FA,UAvFqB,WACnB,IAAMA,GAAWC,EAAAA,EAAAA,MACjB,GAAqBC,EAAAA,EAAAA,MAAdC,GAAP,eACA,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAwBF,EAAAA,EAAAA,UAAS,IAAjC,eAAOG,EAAP,KAAaC,EAAb,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KAEIC,GAAkBC,EAAAA,EAAAA,MAClBC,GAAeD,EAAAA,EAAAA,MACfE,GAAaF,EAAAA,EAAAA,MAEXG,EAAoB,SAACC,GACzB,MAAwBA,EAAMC,cAAtBZ,EAAR,EAAQA,KAAMa,EAAd,EAAcA,MACD,SAATb,GAAiBC,EAAQY,GAChB,WAATb,GAAmBG,EAAQU,GAClB,aAATb,GAAqBK,EAAYQ,EACtC,EAEKC,EAAY,mCAAG,WAAOH,GAAP,gFACnBA,EAAMI,iBADa,SAIXC,EAAW,CACfhB,KAAAA,EACAiB,MAAOf,EACPE,SAAAA,GAPe,SAUMN,EAAWkB,GAAUE,SAV3B,OAUXC,EAVW,OAWjBxB,EAAS,UAETyB,QAAQC,IAAI,2BAA4BF,GAbvB,kDAejBC,QAAQE,MAAM,uBAAd,MAfiB,0DAAH,sDAmBlB,OACE,kBAAMC,UAAWC,EAAAA,EAAAA,KAAUC,SAAUX,EAArC,WACE,mBAAOS,UAAWC,EAAAA,EAAAA,KAAUE,QAASpB,EAArC,UAAsD,aAEpD,kBACEqB,KAAK,OACLd,MAAOb,EACP4B,SAAUlB,EACVV,KAAK,OAGL6B,UAAQ,EACRC,GAAIxB,QAGR,mBAAOiB,UAAWC,EAAAA,EAAAA,KAAUE,QAASlB,EAArC,UAAmD,SAEjD,kBACEmB,KAAK,QACLd,MAAOX,EACP0B,SAAUlB,EACVV,KAAK,SAGL6B,UAAQ,EACRC,GAAItB,QAIR,mBAAOe,UAAWC,EAAAA,EAAAA,KAAUE,QAASjB,EAArC,UAAiD,YAE/C,kBACEkB,KAAK,WACLd,MAAOT,EACPwB,SAAUlB,EACVV,KAAK,WAGL6B,UAAQ,EACRC,GAAIrB,QAIR,mBAAQc,UAAWC,EAAAA,EAAAA,IAASG,KAAK,SAAjC,SAA0C,iBAK/C,C,qBC3FD,KAAgB,KAAO,4BAA4B,IAAM,2B,wDCAlD,IAkBIpB,EAAS,eAACwB,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACL,EAAIM,GAWvD,OAREN,IAFFM,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["pages/Registration.jsx","webpack://react-homework-template/./src/components/FormPhonebook/FormPhonebook.module.css?d55d","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import css from \"../components/FormPhonebook/FormPhonebook.module.css\";\nimport { nanoid } from \"nanoid\";\nimport { useState } from \"react\";\n\nimport { useNavigate } from \"react-router-dom\";\nimport { useRegisterMutation } from \"redux/authSlice\";\n\nconst Registration = () => {\n  const navigate = useNavigate();\n  const [registrate] = useRegisterMutation();\n  const [name, setName] = useState(\"\");\n  const [mail, setMail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  let userNameInputId = nanoid();\n  let emailInputId = nanoid();\n  let passwordId = nanoid();\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.currentTarget;\n    if (name === \"name\") setName(value);\n    if (name === \"number\") setMail(value);\n    if (name === \"password\") setPassword(value);\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const userData = {\n        name,\n        email: mail,\n        password,\n      };\n\n      const response = await registrate(userData).unwrap();\n      navigate(\"/login\");\n\n      console.log(\"Registration successful:\", response);\n    } catch (error) {\n      console.error(\"Registration failed:\", error);\n    }\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <label className={css.form} htmlFor={userNameInputId}>\n        User Name\n        <input\n          type=\"text\"\n          value={name}\n          onChange={handleInputChange}\n          name=\"name\"\n          //   pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          //   title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          id={userNameInputId}\n        />\n      </label>\n      <label className={css.form} htmlFor={emailInputId}>\n        Email\n        <input\n          type=\"email\"\n          value={mail}\n          onChange={handleInputChange}\n          name=\"number\"\n          //   pattern=\"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}\"\n          //   title=\"Please enter a valid email address\"\n          required\n          id={emailInputId}\n        />\n      </label>\n\n      <label className={css.form} htmlFor={passwordId}>\n        Password\n        <input\n          type=\"password\"\n          value={password}\n          onChange={handleInputChange}\n          name=\"password\"\n          //   pattern=\"(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}\"\n          //   title=\"Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, and one digit\"\n          required\n          id={passwordId}\n        />\n      </label>\n\n      <button className={css.btn} type=\"submit\">\n        Registrate\n      </button>\n    </form>\n  );\n};\n\nexport default Registration;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"FormPhonebook_form__yE3-g\",\"btn\":\"FormPhonebook_btn__5b-dH\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["navigate","useNavigate","useRegisterMutation","registrate","useState","name","setName","mail","setMail","password","setPassword","userNameInputId","nanoid","emailInputId","passwordId","handleInputChange","event","currentTarget","value","handleSubmit","preventDefault","userData","email","unwrap","response","console","log","error","className","css","onSubmit","htmlFor","type","onChange","required","id","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}