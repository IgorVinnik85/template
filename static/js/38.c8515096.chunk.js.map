{"version":3,"file":"static/js/38.c8515096.chunk.js","mappings":"6PAoFA,UA3Ec,WACZ,OAA+BA,EAAAA,EAAAA,MAA/B,eAAOC,EAAP,KAAgBC,EAAhB,KAAgBA,UAChB,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KACMC,GAAWC,EAAAA,EAAAA,eACXC,GAAWC,EAAAA,EAAAA,MACbC,GAAeC,EAAAA,EAAAA,MACfC,GAAaD,EAAAA,EAAAA,MACjBE,QAAQC,IAAId,GAEZ,IAAMe,EAAoB,SAAAC,GACxB,MAAwBA,EAAMC,cAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACD,WAATD,GAAmBf,EAAQgB,GAClB,aAATD,GAAqBb,EAAYc,EACtC,EAEKC,EAAY,mCAAG,WAAMJ,GAAN,gFACnBA,EAAMK,iBADa,SAIXC,EAAW,CACfC,MAAOrB,EACPE,SAAAA,GANe,SASML,EAAMuB,GAAUE,SATtB,OASXC,EATW,OAUjBZ,QAAQC,IAAIW,EAASC,OACrBpB,GAASqB,EAAAA,EAAAA,IAASF,EAASC,QAC3BlB,EAAS,aAETK,QAAQC,IAAI,oBAAqBW,GAdhB,kDAgBjBZ,QAAQe,MAAM,gBAAd,MAhBiB,0DAAH,sDAoBlB,OACE,0BACE,kBAAMC,UAAWC,EAAAA,EAAAA,KAAUC,SAAUX,EAArC,WACE,mBAAOS,UAAWC,EAAAA,EAAAA,KAAUE,QAAStB,EAArC,UAAmD,SAEjD,kBACEuB,KAAK,QACLd,MAAOjB,EACPgC,SAAUnB,EACVG,KAAK,SAGLiB,UAAQ,EACRC,GAAI1B,QAIR,mBAAOmB,UAAWC,EAAAA,EAAAA,KAAUE,QAASpB,EAArC,UAAiD,YAE/C,kBACEqB,KAAK,WACLd,MAAOf,EACP8B,SAAUnB,EACVG,KAAK,WAGLiB,UAAQ,EACRC,GAAIxB,QAIR,mBAAQiB,UAAWC,EAAAA,EAAAA,IAASG,KAAK,SAAjC,SAA0C,eAMjD,C,qBCjFD,KAAgB,KAAO,4BAA4B,IAAM,2B,wDCAlD,IAkBItB,EAAS,eAAC0B,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACL,EAAIM,GAWvD,OAREN,IAFFM,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["pages/Login.jsx","webpack://react-homework-template/./src/components/FormPhonebook/FormPhonebook.module.css?d55d","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import React from 'react';\nimport css from '../components/FormPhonebook/FormPhonebook.module.css';\nimport { nanoid } from 'nanoid';\nimport { useState } from 'react';\nimport { setToken, useLogInMutation } from 'redux/authSlice';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\n\n\nconst Login = () => {\n  const [logIn, { isSuccess }] = useLogInMutation();\n  const [mail, setMail] = useState('');\n  const [password, setPassword] = useState('');\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  let emailInputId = nanoid();\n  let passwordId = nanoid();\n  console.log(isSuccess);\n\n  const handleInputChange = event => {\n    const { name, value } = event.currentTarget;\n    if (name === 'number') setMail(value);\n    if (name === 'password') setPassword(value);\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    try {\n      const userData = {\n        email: mail,\n        password,\n      };\n\n      const response = await logIn(userData).unwrap();\n      console.log(response.token);\n      dispatch(setToken(response.token));\n      navigate('/contacts');\n\n      console.log('Login successful:', response);\n    } catch (error) {\n      console.error('Login failed:', error);\n    }\n  };\n\n  return (\n    <div>\n      <form className={css.form} onSubmit={handleSubmit}>\n        <label className={css.form} htmlFor={emailInputId}>\n          Email\n          <input\n            type=\"email\"\n            value={mail}\n            onChange={handleInputChange}\n            name=\"number\"\n            //   pattern=\"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}\"\n            //   title=\"Please enter a valid email address\"\n            required\n            id={emailInputId}\n          />\n        </label>\n\n        <label className={css.form} htmlFor={passwordId}>\n          Password\n          <input\n            type=\"password\"\n            value={password}\n            onChange={handleInputChange}\n            name=\"password\"\n            //   pattern=\"(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}\"\n            //   title=\"Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, and one digit\"\n            required\n            id={passwordId}\n          />\n        </label>\n\n        <button className={css.btn} type=\"submit\">\n          Log in\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default Login;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"FormPhonebook_form__yE3-g\",\"btn\":\"FormPhonebook_btn__5b-dH\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["useLogInMutation","logIn","isSuccess","useState","mail","setMail","password","setPassword","dispatch","useDispatch","navigate","useNavigate","emailInputId","nanoid","passwordId","console","log","handleInputChange","event","currentTarget","name","value","handleSubmit","preventDefault","userData","email","unwrap","response","token","setToken","error","className","css","onSubmit","htmlFor","type","onChange","required","id","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}